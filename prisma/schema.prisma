// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

model Word {
    id String @id @default(cuid())
    word String
    PracticeSessionWord PracticeSessionWord[]
    WordList WordList[]
}

model WordList {
    id String @id @default(cuid())
    name String
    Word Word[]
}

model PracticeSession {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    userId String
    user User @relation(fields: [userId], references: [id])
    practiceSessionWords PracticeSessionWord[]
}

model PracticeSessionWord {
    id String @id @default(cuid())
    practiceSessionId String
    practiceSession PracticeSession @relation(fields: [practiceSessionId], references: [id])
    wordId String
    word Word @relation(fields: [wordId], references: [id])
    correct Boolean
    createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    practices     PracticeSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
